#!/usr/bin/env ruby

require 'optparse'
require 'glpl'

# Initialize Gitlab's Private Token.
private_token = `echo $GITLAB_PRIVATE_TOKEN`.strip()
if private_token == "" then
  puts "Gitlab's Private Token is not defined. Export it to $GITLAB_PRIVATE_TOKEN."
  exit
end

glpl = GLPL.new(private_token)

if ARGV.length == 0 then
  puts "Project is not specified. Please specify the project using: $ glpl [PROJECT]."
  exit
end

match = /#{ARGV[0]}:(?<id>[0-9]+)/.match(`echo $GLPL_PROJECT_IDS`)
if match == nil then
  puts "Project ID is not defined for #{ARGV[0]}. Please update $GLPL_PROJECT_IDS."
  exit
end
project_id = match.captures[0]

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: glpl [PROJECT_NAME] [options]"

  opts.on("-p", "--pipeline ID", Integer, "Pipeline ID") do |pipeline_id|
    for job in glpl.jobs(project_id, pipeline_id) do
      printf("%s %s %s\n",
        job.id.to_s.ljust(10),
        job.name.ljust(60),
        job.status.ljust(10)
      )
    end
    exit
  end

  opts.on("-r", "--retry ID", "Retry a given pipeline") do |pipeline_id|
    glpl.retry(project_id, pipeline_id)
    printf("Sucessfully retried Pipeline#%s.\n", pipeline_id)
    exit
  end

  opts.on("-c", "--cancel ID", "Cancel a given pipeline") do |pipeline_id|
    glpl.cancel(project_id, pipeline_id)
    printf("Sucessfully canceled Pipeline#%s.\n", pipeline_id)
    exit
  end
end.parse!

for pipeline in glpl.pipelines(project_id) do
  printf("%s %s %s\n",
    pipeline.id.to_s.ljust(10),
    pipeline.ref.ljust(60),
    pipeline.status.ljust(10)
  )
end
